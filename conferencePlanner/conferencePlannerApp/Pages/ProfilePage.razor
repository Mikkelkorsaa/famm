@page "/profile"
@using conferencePlannerCore.Models
@using System.Globalization
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IAuthService AuthService

<div class="container py-5">
    @* if the currentuser isn't set at spinner will be shown *@
  @if (CurrentUser is null)
  {
    <div class="text-center">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  }
  else
  {
      @* Showing the user profile information and with an edit button that allows the user to edit their information. *@
    <div class="card shadow-sm mx-auto" style="max-width: 700px;">
      <div class="card-header bg-white py-3">
        <div class="d-flex justify-content-between align-items-center">
          <div class="d-flex align-items-center gap-3">
            <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center text-white"
              style="width: 48px; height: 48px;">
              @(CurrentUser.Name.Length > 0 ? CurrentUser.Name[0].ToString().ToUpper() : "U")
            </div>
            <div>
              <h4 class="mb-0">@CurrentUser.Name</h4>
              <small class="text-muted">@CurrentUser.Role.ToString()</small>
            </div>
          </div>
          <div class="d-flex gap-2">
            <button @onclick="LogOut" class="btn btn-primary">
              Log ud
            </button>
            <button @onclick="DeleteAccount" class="btn btn-primary">
              Slet bruger
            </button>
            <button @onclick="ToggleEditMode" class="btn @(IsEditing ? "btn-secondary" : "btn-primary")">
              @(IsEditing ? "Annuller" : "Rediger")
            </button>
          </div>
        </div>
      </div>

      <div class="card-body">
        <div class="mb-4">
          <label class="form-label">Navn</label>
          @* Displaying the editing mode *@
          @if (IsEditing)
          {
            @if (EditUser != null)
            {
              <input type="text" @bind="EditUser.Name" class="form-control" />
            }
          }
          else
          {
            <div class="form-control bg-light">@CurrentUser.Name</div>
          }
        </div>

        <div class="mb-4">
          <label class="form-label">Email</label>
          @if (IsEditing)
          {
            @if (EditUser != null)
            {
              <input type="text" @bind="EditUser.Email" class="form-control" />
            }
          }
          else
          {
            <div class="form-control bg-light">@CurrentUser.Email</div>
          }
        </div>

        <div class="mb-4">
          <label class="form-label">Origanisation</label>
          @if (IsEditing)
          {
            @if (EditUser != null)
            {
              <input type="text" @bind="EditUser.Organization" class="form-control" />
            }
          }
          else
          {
            <div class="form-control bg-light">@CurrentUser.Organization</div>
          }
        </div>

        @if (IsEditing)
        {
          <div class="d-grid">
            <button @onclick="SaveChanges" class="btn btn-success">
              Save Changes
            </button>
          </div>
        }
      </div>

      <div class="card-footer bg-white">
        <div class="row text-muted">
          <div class="col-md-6">
            <small>Medlem siden @CurrentUser.CreatedAt.ToString("MMMM dd, yyyy")</small>
          </div>
          <div class="col-md-6 text-md-end">
            <small>Status: @(CurrentUser.IsActive ? "Aktiv" : "Inaktiv")</small>
          </div>
        </div>
      </div>
    </div>
  }
</div>

@code {
  private User? CurrentUser { get; set; }
  private User? EditUser { get; set; }
  private bool IsEditing { get; set; } = false;
  private CultureInfo danishCulture { get; set; } = new CultureInfo("da-DK");

  protected override async Task OnInitializedAsync()
  {
    CurrentUser = await AuthService.GetCurrentUser();
    if (CurrentUser is null)
      NavigationManager.NavigateTo("/login");

      // Setting the EditUser to the current user
    EditUser = CurrentUser! with { };
  }

  // Toggles the edit mode
  private void ToggleEditMode()
  {
    if (IsEditing)
    {
      EditUser = CurrentUser! with { };
    }
    IsEditing = !IsEditing;
  }

  // Deletes the user account and logs the user out 
  private async void DeleteAccount()
  {
    var updatedUser = CurrentUser! with { IsActive = false };
    await Http.PutAsJsonAsync("https://localhost:7000/api/user/updateuser", updatedUser);
    await AuthService.ClearCurrentUser();
    NavigationManager.NavigateTo("/");
  }

  // Logs the user out 
  private void LogOut()
  {
    AuthService.ClearCurrentUser();
    NavigationManager.NavigateTo("/");
  }

  // Saves the changes made to the user account 
  private async Task SaveChanges()
  {
    try
    {
      if (EditUser != null)
      {
        CurrentUser = EditUser with { };
        await Http.PutAsJsonAsync("https://localhost:7000/api/user/updateuser", CurrentUser);
        await AuthService.SetCurrentUser(CurrentUser);
      }
      IsEditing = false;
    }
    catch (Exception ex)
    {
      throw ex;
    }
  }
}