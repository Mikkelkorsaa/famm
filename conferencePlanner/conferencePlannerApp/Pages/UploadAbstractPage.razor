@page "/upload-abstract"
@inject IImageService ImageService
@inject IAbstractService AbstractService
@inject IConferenceService ConferenceService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager



<div class="container">
	<RadzenCard class="m-4">
		@*  Display success/error messages to the user *@
		@if (!string.IsNullOrEmpty(message))
		{
			<div class="alert @messageClass mb-4" role="alert">
				@message
			</div>
		}
		@* Main form using Radzen's template form component *@
		<RadzenTemplateForm TItem="Abstract" Data="@_abstract" Submit="@HandleSubmit" InvalidSubmit="@HandleInvalidSubmit">
			<div class="row">
				<div class="col-md-6 mb-3">
					<RadzenLabel Text="Afsenders navn" Component="SenderName" />
					<RadzenTextBox @bind-Value="@_abstract.SenderName" Class="w-100" Name="SenderName" />
					<RadzenRequiredValidator Component="SenderName" Text="Navn er påkrævet" />
				</div>

				<div class="col-md-6 mb-3">
					<RadzenLabel Text="Præsenterende E-mail" Component="PresenterEmail" />
					<RadzenTextBox @bind-Value="@_abstract.PresenterEmail" Class="w-100" Name="PresenterEmail" />
					<RadzenRequiredValidator Component="PresenterEmail" Text="E-mail er påkrævet" />
					<RadzenEmailValidator Component="PresenterEmail" Text="Indtast venligst en gyldig e-mail" />
				</div>
			</div>

			<div class="row">
				<div class="col-md-6 mb-3">
					<RadzenLabel Text="Organisation" Component="Organization" />
					<RadzenTextBox @bind-Value="@_abstract.Organization" Class="w-100" Name="Organization" />
					<RadzenRequiredValidator Component="Organization" Text="Organisation er påkrævet" />
				</div>

				<div class="col-md-6 mb-3">
					<RadzenLabel Text="Kategori" Component="Category" />
					<RadzenDropDown @bind-Value="@_abstract.Category" Class="w-100"
									Data="@Categories" Name="Category" />
					<RadzenRequiredValidator Component="Category" Text="Kategori er påkrævet" />
				</div>
			</div>

			<div class="mb-3">
				<RadzenLabel Text="Titel" Component="Title" />
				<RadzenTextBox @bind-Value="@_abstract.Title" Class="w-100" Name="Title" />
				<RadzenRequiredValidator Component="Title" Text="Titel er påkrævet" />
			</div>

			@* Keywords section with character counter *@
			<div class="mb-3">
				<RadzenLabel Text="Nøglebuskab" Component="KeyValues" />
				<div class="position-relative">
					<RadzenTextArea @bind-Value="@_abstract.KeyValues" Class="w-100"
									Rows="3" Name="KeyValues"
									Change="@OnKeyValuesChange"
									@oninput="@OnKeyValuesInput"
									MaxLength="400" />
					<ValidationMessage For="@(() => _abstract.KeyValues)" />
					<div class="d-flex justify-content-end mt-1">
						<div class="d-flex align-items-center gap-3">
							@if (keyValuesLength < MinKeyValuesLength && keyValuesLength > 0)
							{
								<small class="text-danger">
									Teksten skal være mindst @MinKeyValuesLength tegn
									(mangler @(MinKeyValuesLength - keyValuesLength) tegn)
								</small>
							}
							<small class="text-muted">@keyValuesLength/@MaxKeyValuesLength tegn</small>
						</div>
					</div>
				</div>
			</div>

			<div class="mb-3">
				<RadzenLabel Text="Abstract tekst" Component="AbstractText" />
				<div class="position-relative">
					<RadzenTextArea @bind-Value="@_abstract.AbstractText" Class="w-100"
									Rows="8" Name="AbstractText"
									Change="@OnAbstractTextChange"
									@oninput="@OnAbstractTextInput"
									MaxLength="@MaxAbstractLength" />
					<ValidationMessage For="@(() => _abstract.AbstractText)" />
					<div class="d-flex justify-content-end mt-1">
						<div class="d-flex align-items-center gap-3">
							@if (abstractTextLength < MinAbstractLength && abstractTextLength > 0)
							{
								<small class="text-danger">
									Teksten skal være mindst @MinAbstractLength tegn
									(mangler @(MinAbstractLength - abstractTextLength) tegn)
								</small>
							}
							<small class="text-muted">@abstractTextLength/@MaxAbstractLength tegn</small>
						</div>
					</div>
				</div>
			</div>

			<div class="mb-3">
				<RadzenLabel Text="Medforfattere" />
				<div class="d-flex gap-2 mb-2">
					<RadzenTextBox @bind-Value="@currentCoAuthor" Class="w-100"
								   Placeholder="Indtast medforfatter" @onkeydown="@HandleKeyDown" />
					<RadzenButton Click="@AddCoAuthor" Text="Tilføj"
								  ButtonStyle="ButtonStyle.Secondary"
								  Disabled="@(!CanAddCoAuthor)" />
				</div>

				@* Displaying the list of added co-authors *@
				@if (_abstract.CoAuthors.Any())
				{
					<div class="mt-2">
						@foreach (var author in _abstract.CoAuthors)
						{
							<div class="d-flex justify-content-between align-items-center mb-1 p-2 border rounded">
								<span>@author</span>
								<RadzenButton Click="@(() => RemoveCoAuthor(author))"
											  ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
											  Class="p-0" Icon="close" />
							</div>
						}
					</div>
					<small class="text-muted">
						Antal medforfattere: @_abstract.CoAuthors.Count (max @MaxCoAuthors)
					</small>
				}
			</div>

			@* Image upload section with preview *@
			<div class="mb-3">
				<RadzenLabel Text="Billede" />
				<InputFile OnChange="@OnFileSelected" class="w-100" accept="image/*" />
				@if (!string.IsNullOrEmpty(imagePreview))
				{
					<div class="mt-2">
						<img src="@imagePreview" style="max-width: 200px;" alt="Valgt billede" />
					</div>
				}
			</div>

			<div class="d-flex justify-content-end">
				<RadzenButton ButtonType="ButtonType.Submit" Text="Indsend Abstract"
							  ButtonStyle="ButtonStyle.Primary" Class="mt-3"
							  Disabled="@(isSubmitting || !IsFormValid)" />
			</div>
		</RadzenTemplateForm>
	</RadzenCard>

</div>
@code {
	// Constants for form validation
	private const int MinKeyValuesLength = 10;
	private const int MaxKeyValuesLength = 400;
	private const int MinAbstractLength = 100;
	private const int MaxAbstractLength = 2000;
	private const int MaxCoAuthors = 10;
	private const int DefaultConferenceId = 1;


	// various variables for form state and validation
	private int _conferenceId;
	private Abstract _abstract = new();
	private bool isSubmitting;
	private string? message;
	private string messageClass = string.Empty;
	private string? imagePreview;
	private string currentCoAuthor = string.Empty;
	private int keyValuesLength;
	private int abstractTextLength;

	private List<string>? Categories;

	// Computed properties for adding co-authors and form validation
	private bool CanAddCoAuthor =>
		!string.IsNullOrWhiteSpace(currentCoAuthor) &&
		_abstract.CoAuthors.Count < MaxCoAuthors &&
		!_abstract.CoAuthors.Contains(currentCoAuthor);

	private bool IsFormValid =>
		!string.IsNullOrWhiteSpace(_abstract.SenderName) &&
		!string.IsNullOrWhiteSpace(_abstract.PresenterEmail) &&
		!string.IsNullOrWhiteSpace(_abstract.Organization) &&
		!string.IsNullOrWhiteSpace(_abstract.Category) &&
		!string.IsNullOrWhiteSpace(_abstract.Title) &&
		keyValuesLength >= MinKeyValuesLength &&
		abstractTextLength >= MinAbstractLength;

	// Handle image file selection and upload
	private async Task OnFileSelected(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			if (file == null) return;

			// Create image preview by opening a memory stream and copying the file content to it
			//Then convert the bytes to a base64 string for the image source
			using var memoryStream = new MemoryStream();
			await file.OpenReadStream().CopyToAsync(memoryStream);
			var bytes = memoryStream.ToArray();
			imagePreview = $"data:image/png;base64,{Convert.ToBase64String(bytes)}";

			// Upload image using the ImageService
			var result = await ImageService.UploadImageAsync(file);
			_abstract.Picture = result.FileName;
			ShowMessage("Billede blev uploadet", true);
		}
		catch (ImageServiceException ex)
		{
			ShowMessage($"Kunne ikke uploade billede: {ex.Message}", false);
		}
	}

	protected async override Task OnInitializedAsync()
	{
		// Get the current conference ID and categories 
		// Redirect to the conference picker page if no conference is selected
		var currentPage = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		_conferenceId = await ConferenceService.GetCurrentConferenceIdAsync();
		if (_conferenceId == 0) NavigationManager.NavigateTo($"/pick-conference/{currentPage}");
		Categories = await ConferenceService.GetCategoriesByIdAsync(_conferenceId);

		// Redirect to login page if the user is not logged in or is not an applicant
		var CurrentUser = await AuthService.GetCurrentUser();
		if (CurrentUser is null) NavigationManager.NavigateTo("/login");
		else if (CurrentUser.Role.ToString() != "Applicant" && CurrentUser.Role.ToString() != "Admin")
			NavigationManager.NavigateTo("/dashboard");
	}


	// Handle form submission and display success/error messages
	private async Task HandleSubmit()
	{
		if (!IsFormValid)
		{
			ShowMessage("Venligst udfyld alle påkrævede felter korrekt", false);
			return;
		}

		try
		{
			isSubmitting = true;
			ShowMessage("Sender abstract...", true);

			var savedAbstract = await AbstractService.AddAbstract(_abstract with { ConferenceId = _conferenceId });

			Console.WriteLine(savedAbstract);

			if (savedAbstract?.Id > 0)
			{
				ShowMessage("Abstract blev indsendt successfully", true);
				ResetForm();
			}
			else
			{
				ShowMessage("Der opstod en fejl ved indsendelse af abstract", false);
			}
		}
		catch (Exception ex)
		{
			ShowMessage($"Der opstod en fejl: {ex.Message}", false);
		}
		finally
		{
			isSubmitting = false;
			StateHasChanged();
		}
	}

	//error message for invalid form submission
	private void HandleInvalidSubmit()
	{
		ShowMessage("Venligst udfyld alle påkrævede felter", false);
	}

	// method to display success/error messages
	private void ShowMessage(string text, bool isSuccess)
	{
		message = text;
		messageClass = isSuccess ? "alert-success" : "alert-danger";
		StateHasChanged();
	}

	//Method for displaying the number of characters in the keyvalues
	private void OnKeyValuesInput(ChangeEventArgs args)
	{
		var value = args.Value?.ToString() ?? string.Empty;
		_abstract.KeyValues = value;
		keyValuesLength = value.Length;
		StateHasChanged();
	}

	private void OnKeyValuesChange(string value)
	{
		_abstract.KeyValues = value;
	}

	//Method for displaying the number of characters in the abstract text

	private void OnAbstractTextInput(ChangeEventArgs args)
	{
		var value = args.Value?.ToString() ?? string.Empty;
		_abstract.AbstractText = value;
		abstractTextLength = value.Length;
		StateHasChanged();
	}

	private void OnAbstractTextChange(string value)
	{
		_abstract.AbstractText = value;
	}

	//Method for adding a co-author to the list
	private void AddCoAuthor()
	{
		if (CanAddCoAuthor)
		{
			_abstract.CoAuthors.Add(currentCoAuthor);
			currentCoAuthor = string.Empty;
			StateHasChanged();
		}
	}

	//Method for removing a co-author from the list
	private void RemoveCoAuthor(string author)
	{
		_abstract.CoAuthors.Remove(author);
		StateHasChanged();
	}

		//Method for handling the enter key press when adding a co-author
	private void HandleKeyDown(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
		{
			AddCoAuthor();
		}
	}

	//Method for resetting the form
	private void ResetForm()
	{
		_abstract = new()
			{
				ConferenceId = DefaultConferenceId,
				SenderName = string.Empty,
				PresenterEmail = string.Empty,
				Organization = string.Empty,
				Title = string.Empty,
				KeyValues = string.Empty,
				AbstractText = string.Empty,
				Category = string.Empty,
				Picture = string.Empty,
				CoAuthors = new List<string>()
			};
		currentCoAuthor = string.Empty;
		imagePreview = null;
		keyValuesLength = 0;
		abstractTextLength = 0;
		StateHasChanged();
	}
}
