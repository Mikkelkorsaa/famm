@page "/upload-abstract"
@using conferencePlannerCore.Models
@using conferencePlannerApp.Services.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject IImageService ImageService
@inject IAbstractService AbstractService
@inject IConferenceService ConferenceService
@inject NavigationManager NavigationManager

<PageTitle>Upload Abstract</PageTitle>
<div class="container">
<RadzenCard class="m-4">
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageClass mb-4" role="alert">
            @message
        </div>
    }

    <RadzenTemplateForm TItem="Abstract" Data="@_abstract" Submit="@HandleSubmit" Method="POST">
        <div class="row">
            <div class="col-md-6 mb-3">
                <RadzenLabel Text="Afsenders navn" />
                <RadzenTextBox @bind-Value="@_abstract.SenderName" Class="w-100" Name="SenderName" Required="true" />
                <RadzenRequiredValidator Component="SenderName" Text="Navn er påkrævet" />
            </div>

            <div class="col-md-6 mb-3">
                <RadzenLabel Text="Oplægsholder Email" />
                <RadzenTextBox @bind-Value="@_abstract.PresenterEmail" Class="w-100" Name="PresenterEmail"
                    Required="true" />
                <RadzenRequiredValidator Component="PresenterEmail" Text="E-mail er påkrævet" />
                <RadzenEmailValidator Component="PresenterEmail" Text="Indtast venligst en gyldig e-mail" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-3">
                <RadzenLabel Text="Organisation" />
                <RadzenTextBox @bind-Value="@_abstract.Organization" Class="w-100" Name="Organization"
                    Required="true" />
                <RadzenRequiredValidator Component="Organization" Text="Organisation er påkrævet" />
            </div>

            <div class="col-md-6 mb-3">
                <RadzenLabel Text="Kategori" />
                <RadzenDropDown @bind-Value="@_abstract.Category" Class="w-100" Data="@categories" Name="Category"
                    Required="true" />
                <RadzenRequiredValidator Component="Category" Text="Kategori er påkrævet" />
            </div>
        </div>

        <div class="mb-3">
            <RadzenLabel Text="Titel" />
            <RadzenTextBox @bind-Value="@_abstract.Title" Class="w-100" Name="Title" Required="true" />
            <RadzenRequiredValidator Component="Title" Text="Titel er påkrævet" />
        </div>

        <div class="mb-3">
            <RadzenLabel Text="Nøglebudskab" />
                <RadzenTextArea MaxLength="400" @bind-Value="@_abstract.KeyValues" Class="w-100" Rows="4" Name="KeyValues" Required="true" />
            <RadzenRequiredValidator Component="KeyValues" Text="Nøglebudskab er påkrævet" />
        </div>

        <div class="mb-3">
            <RadzenLabel Text="Abstrakt tekst" />
                <RadzenTextArea MaxLength="2000" @bind-Value="@_abstract.AbstractText" Class="w-100" Rows="8" Name="AbstractText"
                Required="true" />
            <RadzenRequiredValidator Component="AbstractText" Text="Abstrakt tekst er påkrævet" />
        </div>

        <div class="mb-3">
            <RadzenLabel Text="Medforfattere (én pr. linje)" />
            <RadzenTextArea @bind-Value="@coAuthorsText" Class="w-100" Rows="3" Change=@(async(string value) => await
                OnCoAuthorsChange(value)) />
        </div>

        <div class="mb-3">
            <RadzenLabel Text="Billede" />
            <InputFile OnChange="@OnFileSelected" class="w-100" accept="image/*" />
            @if (!string.IsNullOrEmpty(chosenPicture))
            {
                <div class="mt-2">
                    <img src="@chosenPicture" style="max-width: 200px;" alt="Valgt billede" />
                </div>
            }
        </div>

        <div class="d-flex justify-content-end">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Indsend Abstrakt" ButtonStyle="ButtonStyle.Primary"
                Class="mt-3" Disabled="@isSubmitting" />
        </div>
    </RadzenTemplateForm>
</RadzenCard>
</div>
@code {
    private Abstract _abstract = new()
        {
            ConferenceId = 1,
            SenderName = string.Empty,
            PresenterEmail = string.Empty,
            Organization = string.Empty,
            Title = string.Empty,
            KeyValues = string.Empty,
            AbstractText = string.Empty,
            Category = string.Empty,
            Picture = string.Empty,
            CoAuthors = new List<string>()
        };
    private string coAuthorsText = string.Empty;
    private bool isSubmitting = false;
    private string? message;
    private string messageClass = "";
    private string? chosenPicture;
    private List<string> categories = new()
{
"Forskningsartikel",
"Poster",
"Workshop",
"Paneldiskussion"
};

    protected override void OnInitialized()
    {
        _abstract.ConferenceId = 1;
    }

    private async Task OnCoAuthorsChange(string value)
    {
        coAuthorsText = value;
        _abstract.CoAuthors = value.Split(new[] { Environment.NewLine },
        StringSplitOptions.RemoveEmptyEntries)
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .ToList();
        await Task.CompletedTask;
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;

            var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var bytes = memoryStream.ToArray();
            chosenPicture = $"data:image/png;base64, {Convert.ToBase64String(bytes)}";

            var result = await ImageService.UploadImageAsync(file);
            _abstract.Picture = result.FileName;
            // await PreviewImage(result.FileName);
            ShowMessage("Billede blev uploadet", true);
        }
        catch (ImageServiceException ex)
        {
            ShowMessage($"Kunne ikke uploade billede: {ex.Message}", false);
        }
    }
    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            ShowMessage("Sender abstract...", true);

            // Ensure the date is set
            if (_abstract.ConferenceId <= 0)
            {
                _abstract.ConferenceId = 1; // Default conference ID
            }

            var savedAbstract = await AbstractService.AddAbstract(_abstract);

            if (savedAbstract != null && savedAbstract.Id > 0)
            {
                ShowMessage("Abstract blev indsendt successfully", true);
                // Clear form or redirect
                _abstract = new();
                coAuthorsText = string.Empty;
            }
            else
            {
                ShowMessage("Der opstod en fejl ved indsendelse af abstract", false);
            }
        }
        catch (HttpRequestException ex)
        {
            ShowMessage($"Kunne ikke indsende abstract: {ex.Message}", false);
        }
        catch (Exception ex)
        {
            ShowMessage($"Der opstod en uventet fejl: {ex.Message}", false);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ShowMessage(string text, bool isSuccess)
    {
        message = text;
        messageClass = isSuccess ? "alert-success" : "alert-danger";
    }
}