@page "/login"
@using conferencePlannerCore.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="row justify-content-center">
  <div class="col-md-4">
    <div class="card">
      <div class="card-body">
        <div class="d-flex justify-content-center mb-3">
          <div class="btn-group">
            <button class="btn @(isLogin ? "btn-primary" : "btn-outline-primary")" @onclick="() => isLogin = true">Login</button>
            <button class="btn @(!isLogin ? "btn-primary" : "btn-outline-primary")" @onclick="() => isLogin = false">Sign Up</button>
          </div>
        </div>

        @if (isLogin)
        {
          <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group">
              <label>Email</label>
              <InputText @bind-Value="loginModel.Email" class="form-control" />
            </div>

            <div class="form-group mt-3">
              <label>Password</label>
              <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
              <div class="alert alert-danger mt-3">@errorMessage</div>
            }

            <button type="submit" class="btn btn-primary mt-3 w-100">Login</button>
          </EditForm>
        }
        else
        {
          <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <div class="form-group">
              <label>Email</label>
              <InputText @bind-Value="registerModel.Email" class="form-control" />
              <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group mt-3">
              <label>Password</label>
              <InputText type="password" @bind-Value="registerModel.Password" class="form-control" />
              <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="form-group mt-3">
              <label>Confirm Password</label>
              <InputText type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
              <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
              <div class="alert alert-danger mt-3">@errorMessage</div>
            }

            <button type="submit" class="btn btn-primary mt-3 w-100">Sign Up</button>
          </EditForm>
        }
      </div>
    </div>
  </div>
</div>

@code {
  private bool isLogin = true;
  private LoginModel loginModel = new();
  private RegisterModel registerModel = new();
  private string errorMessage = string.Empty;

  private async Task HandleLogin()
  {
    try
    {
      var response = await Http.PostAsJsonAsync("https://localhost:7000/api/user/login", loginModel);
      if (response.IsSuccessStatusCode)
      {
        NavigationManager.NavigateTo("/");
      }
      else
      {
        errorMessage = "Invalid login attempt";
      }
    }
    catch
    {
      errorMessage = "Error connecting to server";
    }
  }

  private async Task HandleRegister()
  {
    try
    {
      var response = await Http.PostAsJsonAsync("https://localhost:7000/api/user/register", registerModel);
      if (response.IsSuccessStatusCode)
      {
        isLogin = true;
        errorMessage = string.Empty;
      }
      else
      {
        errorMessage = "Registration failed. Please try again.";
      }
    }
    catch
    {
      errorMessage = "Error connecting to server";
    }
  }
}