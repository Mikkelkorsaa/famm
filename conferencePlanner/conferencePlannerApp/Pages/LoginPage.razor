@page "/login"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILoginService LoginService

<div class="row justify-content-center">
	<div class="col-md-4">
		<div class="card">
			<div class="card-body">
				<div class="d-flex justify-content-center mb-3">
					<div class="btn-group">
						<button class="btn @(isLogin ? "btn-primary" : "btn-outline-primary")"
							@onclick="() => isLogin = true">Login</button>
						<button class="btn @(!isLogin ? "btn-primary" : "btn-outline-primary")"
							@onclick="() => isLogin = false">Opret Bruger</button>
					</div>
				</div>

				@* Showing login or register form depnding of which button has been pressed *@
				@if (isLogin)
				{
					<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
						<DataAnnotationsValidator />

						<div class="form-group">
							<label>Email</label>
							<InputText @bind-Value="loginModel.Email" class="form-control" />
						</div>

						<div class="form-group mt-3">
							<label>Adgangskode</label>
							<InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
						</div>

						@if (!string.IsNullOrEmpty(errorMessage))
						{
							<div class="alert alert-danger mt-3">@errorMessage</div>
						}

						<button type="submit" class="btn btn-primary mt-3 w-100">Login</button>
					</EditForm>
				}
				else
				{
					<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
						<DataAnnotationsValidator />

						<div class="form-group">
							<label>Navn</label>
							<InputText @bind-Value="registerModel.Name" class="form-control" />
							<ValidationMessage For="@(() => registerModel.Name)" />
						</div>

						<div class="form-group">
							<label>Email</label>
							<InputText @bind-Value="registerModel.Email" class="form-control" />
							<ValidationMessage For="@(() => registerModel.Email)" />
						</div>

						<div class="form-group mt-3">
							<label>Adgangskode</label>
							<InputText type="password" @bind-Value="registerModel.Password" class="form-control" />
							<ValidationMessage For="@(() => registerModel.Password)" />
						</div>

						<div class="form-group mt-3">
							<label>Bekr√¶ft adgangskode</label>
							<InputText type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
							<ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
						</div>

						<div class="form-group mt-3">
							<label>Organisation</label>
							<InputText @bind-Value="registerModel.Organization" class="form-control" />
							<ValidationMessage For="@(() => registerModel.Organization)" />
						</div>

						@if (!string.IsNullOrEmpty(errorMessage))
						{
							<div class="alert alert-danger mt-3">@errorMessage</div>
						}

						<button type="submit" class="btn btn-primary mt-3 w-100">Opret</button>
					</EditForm>
				}
			</div>
		</div>
	</div>
</div>

@code {
	private bool isLogin = true;
	private LoginModel loginModel = new();
	private RegisterModel registerModel = new();
	private string errorMessage = string.Empty;

	// Method for handling login
	private async Task HandleLogin()
	{
		try
		{
			// Login the user and set the current user and user id in the local storage
			var user = await LoginService.LoginAsync(loginModel);
			await AuthService.SetCurrentUser(user);
			await AuthService.SetCurrentUserId(user);
			NavigationManager.NavigateTo("/dashboard", forceLoad: true);
		}
		catch (Exception ex)
		{
			errorMessage = "exception: " + ex.Message;
		}
	}

	// Method for handling register
	private async Task HandleRegister()
	{
		try
		{
			await LoginService.RegisterAsync(registerModel);
			// Success - navigate to login or show success message
			isLogin = true; // Switch to login view
			StateHasChanged();
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			StateHasChanged();
		}
	}
}