@page "/image-service-test"
@using conferencePlannerApp.Services.Interfaces
@using conferencePlannerCore.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IImageService ImageService

<div class="container mx-4 my-4">
    <h3>Image Service Test Page</h3>

    <!-- Upload Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h4>Upload Image</h4>
        </div>
        <div class="card-body">
            <InputFile OnChange="@HandleFileSelected" class="form-control mb-2" accept="image/*" />
            @if (uploadProgress > 0 && uploadProgress < 100)
            {
                <div class="progress mb-2">
                    <div class="progress-bar" role="progressbar" style="width: @uploadProgress%">
                        @uploadProgress%
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(uploadedFileName))
            {
                <div class="alert alert-success">
                    Successfully uploaded: @uploadedFileName
                </div>
            }
            @if (uploadError != null)
            {
                <div class="alert alert-danger">
                    Upload failed: @uploadError
                </div>
            }
        </div>
    </div>

    <!-- Image List Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h4>Uploaded Images</h4>
        </div>
        <div class="card-body">
            @if (uploadedFileName != null)
            {
                <div class="mb-3">
                    <div class="d-flex align-items-center mb-2">
                        <h5 class="mb-0">@uploadedFileName</h5>
                        <button class="btn btn-danger btn-sm ms-2" @onclick="@(() => DeleteImage(uploadedFileName))">
                            Delete
                        </button>
                    </div>
                    @if (loadedImage != null)
                    {
                        <img src="data:@loadedImage.ContentType;base64,@Convert.ToBase64String(loadedImage.Content)"
                             alt="@uploadedFileName"
                             style="max-width: 300px;"
                             class="img-thumbnail" />
                    }
                    <button class="btn btn-primary btn-sm mt-2" @onclick="@(() => LoadImage(uploadedFileName))">
                        Reload Image
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string? uploadedFileName;
    private string? uploadError;
    private int uploadProgress;
    private ImageResponse? loadedImage;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            uploadError = null;
            uploadProgress = 0;
            var file = e.File;

            // Display upload progress
            var progressReporter = new Progress<int>(progress =>
            {
                uploadProgress = progress;
                StateHasChanged();
            });

            // Upload the file
            var result = await ImageService.UploadImageAsync(file);
            uploadedFileName = result.FileName;
            uploadProgress = 100;

            // Load the uploaded image
            await LoadImage(result.FileName);
        }
        catch (ImageServiceException ex)
        {
            uploadError = ex.Message;
            uploadProgress = 0;
        }
    }

    private async Task LoadImage(string fileName)
    {
        try
        {
            loadedImage = await ImageService.GetImageAsync(fileName);
        }
        catch (ImageServiceException ex)
        {
            uploadError = $"Failed to load image: {ex.Message}";
        }
    }

    private async Task DeleteImage(string fileName)
    {
        try
        {
            await ImageService.DeleteImageAsync(fileName);
            uploadedFileName = null;
            loadedImage = null;
        }
        catch (ImageServiceException ex)
        {
            uploadError = $"Failed to delete image: {ex.Message}";
        }
    }
}