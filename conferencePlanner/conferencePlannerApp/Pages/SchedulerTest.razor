@page "/scheduler-test"
@inject IConferenceService conferenceService;
@inject IVenueService venueService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (_conferenceId == null)
{
    <div class="container">
        <button class="btn btn-primary" @onclick="()=> _showEventFormModal = true">Tilføj session</button>
        <SchedulerComponent Rooms="@_rooms" Events="@SortedEvents" />
        @if (_showEventFormModal)
        {
            <ModalComponent OnClose="()=> _showEventFormModal = false">
                <EventFormComponent Rooms="@_rooms" OnSave="AddEvent" />
            </ModalComponent>
        }
    </div>
}
else
{
<SimpleConferenceComponent/>    
}
@code {
    private bool _showEventFormModal = false;
    private List<Room>? _rooms;
    private Conference? _conference;
    private List<SchedulerEvent>? events;
    private Venue? _venue;

    private List<SchedulerEvent> SortedEvents => events.OrderBy(e => e.Start).ToList();
    private int? _conferenceId;

    protected override async Task OnInitializedAsync()
    {
        _conferenceId = await conferenceService.GetCurrentConferenceIdAsync();
        _conference = await conferenceService.GetByIdAsync(_conferenceId);
        _venue = await venueService.GetByIdAsync(_conference.Location.Id);
        _rooms = _venue.Rooms;
    }

    private void AddEvent(SchedulerEvent se)
    {
        // Generate a new ID for the event
        se.Id = events.Count > 0 ? events.Max(e => e.Id) + 1 : 1;

        events.Add(se);
        _showEventFormModal = false;
        StateHasChanged();
    }
}