@using Radzen
@using Radzen.Blazor

@inject DialogService DialogService


<RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="Session" Data=@appointments StartProperty="Start" EndProperty="End"
				 TextProperty="Text"
				 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect
				 AppointmentMove=@OnAppointmentMove>
	<RadzenThreeDayView />
</RadzenScheduler>

@code {
	RadzenScheduler<Session> scheduler;
	Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

	IList<Session> appointments = new List<Session>
	{
		new Session { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
		new Session { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
		new Session { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
		new Session { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
		new Session { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
		new Session { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
		new Session { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
	};



	async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
	{

		Session data = await DialogService.OpenAsync<AddAppointmentPage>("Tilføj Session",
			new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

		if (data != null)
		{
			appointments.Add(data);
			// Either call the Reload method or reassign the Data property of the Scheduler
			await scheduler.Reload();
		}

	}

	async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Session> args)
	{

		var copy = new Session
			{
				Start = args.Data.Start,
				End = args.Data.End,
				Text = args.Data.Text
			};

		var data = await DialogService.OpenAsync<EditAppointmentPage>("Rediger session", new Dictionary<string, object> { { "Appointment", copy } });

		if (data != null)
		{
			// Update the appointment
			args.Data.Start = data.Start;
			args.Data.End = data.End;
			args.Data.Text = data.Text;
		}

		await scheduler.Reload();
	}



	async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
	{
		var draggedAppointment = appointments.FirstOrDefault(x => x == args.Appointment.Data);

		if (draggedAppointment != null)
		{
			draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;

			draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

			await scheduler.Reload();
		}
	}
}