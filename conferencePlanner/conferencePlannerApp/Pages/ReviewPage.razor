@page "/Review"
@using conferencePlannerApp.Components
@using conferencePlannerCore.Models
@inject HttpClient Http
@inject IAbstractService AbstractService


<h3>Review Page</h3>
<AbstractListComponent _abstractList="@_abstractList" OnAbstractSelected="SetAbstract"></AbstractListComponent>
@if(_currentAbstract!= null){
<ViewAbstractComponent SelectedAbstract="@_currentAbstract"></ViewAbstractComponent>
}


@code {
    private List<Review> Reviews = new List<Review>();

    private List<Abstract> _abstractList = new List<Abstract>();
    private Abstract _currentAbstract;

    protected override async Task OnInitializedAsync()
    {
        _abstractList = await AbstractService.GetAllAbstracts();
        // Populate with dummy data
        Reviews = new List<Review>
        {
            new Review
            {
                Id = 1,
                UserId = 123,
                Comment = "Great conference!",
                Criterias = new List<Criteria>
                {
                    new Criteria { Name = "Content Quality", Grade = 4 },
                    new Criteria { Name = "Speaker Performance", Grade = 5 },
                    new Criteria { Name = "Organization", Grade = 3 }
                }
            },
            new Review
            {
                Id = 2,
                UserId = 456,
                Comment = "Good event overall.",
                Criterias = new List<Criteria>
                {
                    new Criteria { Name = "Content Quality", Grade = 3 },
                    new Criteria { Name = "Speaker Performance", Grade = 4 },
                    new Criteria { Name = "Organization", Grade = 4 }
                }
            }
        };
    }

    private async Task UpdateAbstract()
    {
        //Update the abstract with the review data
        await Http.PostAsJsonAsync("api/reviews", Reviews); // Example API call
    }

    private void SetAbstract(Abstract abs)
    {
        _currentAbstract = abs;
        Console.WriteLine(_currentAbstract);
    }
}
