@page "/review"
@using conferencePlannerApp.Components
@using conferencePlannerCore.Models
@inject HttpClient Http
@inject IAbstractService AbstractService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin, Organizer, Reviewer")]
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IConferenceService ConferenceService
@if(_conferenceId == null){
    <SimpleConferenceComponent></SimpleConferenceComponent>
}
else{}
<div class="container-fluid">
    <div class="filler" />
    <div class="row no-gutters">
        <div class="@sidebarColumnClass">
            <AbstractListComponent @ref="_abstractListComponent"
                                   AbstractList="@_abstractList"
                                   OnAbstractSelected="SetAbstract"
                                   OnCollapseChanged="HandleCollapseChanged">
            </AbstractListComponent>
        </div>
        <div class="@contentColumnClass">
            <div class="row">
                <div class="view-abstract-column">
                    @if (_currentAbstract != null)
                    {
                        <ViewAbstractComponent SelectedAbstract="@_currentAbstract"></ViewAbstractComponent>
                    }
                </div>
                <div class="review-column">
                    @if (_currentAbstract != null)
                    {
                        <AuthorizeView Roles="Organizer">
                            <Authorized>
                                <FinalReviewComponent SelectedAbstract="@_currentAbstract" />
                            </Authorized>
                        </AuthorizeView>
                        <AuthorizeView Roles="Reviewer">
                            <Authorized>
                                <ReviewComponent SelectedAbstract="@_currentAbstract" />
                            </Authorized>
                        </AuthorizeView>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    window.registerHandlers = (sidebarRef, dotNetHelper) => {
        document.addEventListener("click", (event) => {
            const sidebarElement = sidebarRef && sidebarRef.getBoundingClientRect();
            const isClickInside =
                sidebarElement &&
                event.clientX >= sidebarElement.left &&
                event.clientX <= sidebarElement.right &&
                event.clientY >= sidebarElement.top &&
                event.clientY <= sidebarElement.bottom;
            if (!isClickInside) {
                dotNetHelper.invokeMethodAsync("CollapseSidebar");
            }
        });

        window.addEventListener("resize", () => {
            dotNetHelper.invokeMethodAsync("OnResize", window.innerWidth);
        });
    };

    window.unregisterHandlers = () => {
        document.removeEventListener("click");
        window.removeEventListener("resize");
    };
</script>

@code {
    private AbstractListComponent? _abstractListComponent;
    private List<Abstract> _abstractList = new();
    private Abstract? _currentAbstract;
    private bool isSidebarCollapsed;
    private int windowWidth;
    private User? _user;
    private int? _conferenceId;
    private Conference? _conference;

    private string sidebarColumnClass => isSidebarCollapsed
        ? "col-2 sidebar-transition sidebar-column-collapsed"
        : "col-1 sidebar-transition sidebar-column-expanded";

    private string contentColumnClass => isSidebarCollapsed
        ? "col-11 sidebar-transition content-column sidebar-column-collapsed"
        : "col-10 sidebar-transition content-column sidebar-column-expanded";

    protected override async Task OnInitializedAsync()
    {
        _conferenceId = await ConferenceService.GetCurrentConferenceIdAsync();
        _abstractList = await AbstractService.GetAbstracts();
        _user = await localStorage.GetItemAsync<User>("user");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_conferenceId.HasValue)
        {
            _conference = await ConferenceService.GetByIdAsync(_conferenceId.Value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("registerHandlers", _abstractListComponent?.PublicSidebarRef, dotNetRef);
            windowWidth = await JSRuntime.InvokeAsync<int>("eval", "window.innerWidth");
        }
    }

    [JSInvokable]
    public void OnResize(int width)
    {
        windowWidth = width;
        StateHasChanged();
    }

    private void SetAbstract(Abstract abs)
    {
        _currentAbstract = abs;
    }

    private void HandleCollapseChanged(bool isCollapsed)
    {
        isSidebarCollapsed = isCollapsed;
        StateHasChanged();
    }

    [JSInvokable]
    public void CollapseSidebar()
    {
        if (!isSidebarCollapsed)
        {
            isSidebarCollapsed = true;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("unregisterHandlers");
    }
}