@inject IConferenceService conferenceService
@page "/conference"
@inject NavigationManager navigationmanager
@inject IAuthService AuthService
@inject Blazored.LocalStorage.ILocalStorageService localStorage



<div class="container text-center mt-4">
	<button type="button"
			class="custom-button"
			@onclick="createConference">
		Opret konferencer
	</button>

	@if (showModal)
	{
		<ModalComponent OnClose="() => showModal = false">
			<OnCreateConferenceComponent OnCancel="() => showModal = false"></OnCreateConferenceComponent>
		</ModalComponent>
	}

	<button type="button"
			class="custom-button"
			@onclick="ShowConferences">
		Rediger en konference
	</button>

	@if (showConferenceTableModal)
	{
		<ModalComponent OnClose="() => showConferenceTableModal = false">
			<ConferenceTableComponent conferences="@conferences"
									  OnConferenceSelected="editConference" />
		</ModalComponent>
	}
</div>


@code {
	private bool showModal = false;
	private bool showConferenceTableModal = false;
	private List<Conference> conferences = new List<Conference>();

	//Checks if the user is logged in and has the correct role. If not, the user will be redirected to the login page or dashboard.
	protected override async Task OnInitializedAsync()
	{
		var CurrentUser = await AuthService.GetCurrentUser();
		if (CurrentUser is null)
			navigationmanager.NavigateTo("/login");
		else if (CurrentUser.Role.ToString() != "Organizer" && CurrentUser.Role.ToString() != "Admin")
			navigationmanager.NavigateTo("/dashboard");

	}

	//Method for creating a conference
	private void createConference()
	{
		showModal = true;
		StateHasChanged();
	}

	//Method for displaying all active conferences
	// It fetches a list of active conferences from the database and stores it in local storage
	//  before showing the conference table modal
	private async Task ShowConferences()
	{
		var conferenceList = await conferenceService.GetActiveConferencesAsync();
		await localStorage.SetItemAsync<List<Conference>>("ConferenceList", conferenceList);
		showConferenceTableModal = true;
		StateHasChanged();
	}

	//Method for editing a conference by setting the conference in local storage and redirecting the user to the edit conference page
	private async Task editConference(Conference conference)
	{
		await localStorage.SetItemAsync<Conference>("TemplateConference", conference);
		navigationmanager.NavigateTo("/conference-edit");
		StateHasChanged();
	}

	//Method for handling the save event when creating a conference
	private void HandleSave(Conference conference)
	{
		showModal = false;
		StateHasChanged();
	}
}