@using conferencePlannerCore.Models
@inject IConferenceService ConferenceService
@inject IAbstractService AbstractService
@inject IJSRuntime JSRuntime
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">

<div class="abstract-sidebar @(IsCollapsed ? "collapsed" : "expanded")" @ref="PublicSidebarRef">
    <div class="collapse-toggle" @onclick="ToggleCollapse">
        <i class="bi bi-list"></i>
    </div>

    @if (!IsCollapsed)
    {
        <div class="abstract-list-container">
            <div class="list-group">
                @if (AbstractList != null)
                {
                    @foreach (var abstractItem in AbstractList)
                    {
                        <div class="list-group-item list-group-item-action @(abstractItem == SelectedAbstract ? "active" : "")"
                        @onclick="() => SetAbstract(abstractItem)">
                            <h6 class="mb-1 text-truncate">@abstractItem.Title</h6>
                        </div>
                    }
                }
            </div>

            @if (AbstractList == null || !AbstractList.Any())
            {
                <div class="text-center text-muted mt-3">
                    No abstracts available
                </div>
            }
        </div>
    }
</div>

<script>
    window.addEventListener('scroll', function () {
    var sidebar = document.querySelector('.abstract-sidebar');
    var navMenuHeight = document.querySelector('.custom-navbar').offsetHeight;
    var scrollTop = window.scrollY;

    if (scrollTop > navMenuHeight - 10) {
    sidebar.style.top = '10px';
    } else {
    sidebar.style.top = (navMenuHeight - scrollTop + 10) + 'px';
    }
    });
</script>

@code {
    [Parameter]
    public EventCallback<Abstract> OnAbstractSelected { get; set; }

    [Parameter]
    public EventCallback<bool> OnCollapseChanged { get; set; }

    [Parameter]
    public List<Abstract>? AbstractList { get; set; }

    public ElementReference PublicSidebarRef { get; private set; }

    private Abstract? SelectedAbstract { get; set; }
    private bool IsCollapsed { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        int id = await ConferenceService.GetCurrentConferenceIdAsync();
        if (id != 0)
        {
            AbstractList = await AbstractService.GetAllAbstractsByConferenceIdAsync(id);
        }
        else
        {
            AbstractList = new List<Abstract>();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("registerHandlers", PublicSidebarRef, dotNetRef);
        }
    }

    [JSInvokable]
    public async Task CollapseSidebar()
    {
        if(!IsCollapsed){
            IsCollapsed = true;
            StateHasChanged();
            await OnCollapseChanged.InvokeAsync(IsCollapsed);

        }
        
    }


    private async Task SetAbstract(Abstract abstractItem)
    {
        SelectedAbstract = abstractItem;
        await OnAbstractSelected.InvokeAsync(abstractItem);
    }

    private async Task ToggleCollapse()
    {
        IsCollapsed = !IsCollapsed;
        await OnCollapseChanged.InvokeAsync(IsCollapsed);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("unregisterHandlers");
    }
}
