@using conferencePlannerCore.Models
@inject IAbstractService AbstractService
@inject IJSRuntime JSRuntime
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">

<div class="abstract-sidebar @(IsCollapsed ? "collapsed" : "expanded")" @ref="PublicSidebarRef">
    <div class="collapse-toggle" @onclick="ToggleCollapse">
        <i class="bi bi-list"></i>
    </div>

    @if (!IsCollapsed)
    {
        <div class="abstract-list-container">
            <div class="list-group">
                @foreach (var abstractItem in _abstractList)
                {
                    <div class="list-group-item list-group-item-action @(abstractItem == SelectedAbstract ? "active" : "")"
                         @onclick="() => SetAbstract(abstractItem)">
                        <h6 class="mb-1 text-truncate">@abstractItem.Title</h6>
                    </div>
                }
            </div>

            @if (!_abstractList.Any())
            {
                <div class="text-center text-muted mt-3">
                    No abstracts available
                </div>
            }
        </div>
    }
</div>

<style>
    /* Sidebar Container */
    .abstract-sidebar {
        position: fixed; /* Change from absolute to fixed */
        top: 66px; /* Keeps your current top positioning */
        left: 5px;
        bottom: 10px;
        height: calc(100vh - 76px); /* Subtract the top offset */
        max-height: calc(100vh - 76px); /* Ensure it doesn't exceed viewport */
        overflow-y: auto; /* Allow scrolling within sidebar if content exceeds height */
        transition: width 0.5s ease, box-shadow 0.5s ease;
        background-color: #f8f9fa;
        border-right: 1px solid #d6d8db;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        display: flex;
        flex-direction: column;
        border-radius: 8px;
    }

        .abstract-sidebar.collapsed {
            width: 60px;
        }

        .abstract-sidebar.expanded {
            width: 250px;
        }

    .collapse-toggle {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        background-color: #e9ecef;
        border-bottom: 1px solid #d6d8db;
        transition: background-color 0.2s;
        border-radius: 8px 8px 0 0;
    }

        .collapse-toggle:hover {
            background-color: #d6d8db;
        }

    .abstract-list-container {
        flex-grow: 1;
        padding: 10px;
        overflow-y: auto;
        background-color: #f8f9fa;
    }

    .list-group-item {
        cursor: pointer;
        transition: background-color 0.2s;
        background-color: #ffffff;
        border: 1px solid #d6d8db;
        margin-bottom: 5px;
        border-radius: 8px;
    }

        .list-group-item:hover {
            background-color: #e9ecef;
        }

        .list-group-item.active {
            background-color: #cce5ff;
            border-color: #b8daff;
            color: #004085;
        }

    .text-truncate {
        max-width: 250px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .abstract-sidebar.collapsed .abstract-list-container {
        display: none;
    }

    .abstract-sidebar.collapsed .list-group-item {
        display: none;
    }

    .abstract-sidebar.collapsed .text-center {
        display: none;
    }
</style>

@code {
    [Parameter]
    public List<Abstract> _abstractList { get; set; } = new List<Abstract>();

    [Parameter]
    public EventCallback<Abstract> OnAbstractSelected { get; set; }

    [Parameter]
    public EventCallback<bool> OnCollapseChanged { get; set; }

    public ElementReference PublicSidebarRef { get; private set; }

    private Abstract SelectedAbstract { get; set; } = null;

    private bool IsCollapsed { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("registerHandlers", PublicSidebarRef, dotNetRef);
        }
    }

    [JSInvokable]
    public void CollapseSidebar()
    {
        if (!IsCollapsed)
        {
            IsCollapsed = true;
            StateHasChanged();
            OnCollapseChanged.InvokeAsync(IsCollapsed);
        }
    }

    private async Task SetAbstract(Abstract abstractItem)
    {
        SelectedAbstract = abstractItem;
        await OnAbstractSelected.InvokeAsync(abstractItem);
    }

    private void ToggleCollapse()
    {
        IsCollapsed = !IsCollapsed;
        OnCollapseChanged.InvokeAsync(IsCollapsed);
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("unregisterHandlers");
    }
}
