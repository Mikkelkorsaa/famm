@inject IUserService userService;
@using Microsoft.AspNetCore.Components.Forms
<div>
<EditForm Model="@NewReviewer" OnValidSubmit="@HandleValidSubmit">
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" @bind="searchFilter.Query" placeholder="Søg efter bedømmer..." />
                <button class="btn btn-outline-secondary" type="button" @onclick="HandleSearch">Søg</button>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <button type="button" class="btn btn-primary w-100" @onclick="()=> showInviteUserModal = true">Send invitation</button>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="row row-cols-2 g-3">
                @foreach (var category in Categories)
                {
                    <div class="col">
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="checkbox"
                                   name="categoryCheckbox"
                                   id="@($"category_{category}")"
                                   checked="@selectedCategories.Contains(category)"
                                   @onchange="@(e => HandleCategoryToggle(category, e.Value))" />
                            <label class="form-check-label" for="@($"category_{category}")">
                                @category
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-6">
            <button type="submit" class="btn btn-success w-100">Gem bedømmer</button>
        </div>
        <div class="col-6">
            <button type="button" class="btn btn-secondary w-100" @onclick="HandleCancel">Annuller</button>
        </div>
    </div>
</EditForm>
</div>
@if (showInviteUserModal)
{
    <ModalComponent OnClose="() => showInviteUserModal = false">
        <InviteUserComponent OnCancel="()=> showInviteUserModal =false"
                             OnSave="HandleInviteUser" />
    </ModalComponent>
}
@if (showFindUserModal)
{
     <ModalComponent OnClose="() => showInviteUserModal = false">
        <SearchForUserComponent OnCancel="() => showFindUserModal = false"
                                OnUserSelected="HandleInviteUser"
                                searchTerm = "searchFilter"
                                totalResults="searchResults"
                                FoundUsers="searchResult"
            />
     </ModalComponent>   
}

@code {
    [Parameter]
    public Reviewer NewReviewer { get; set; } = new();
    [Parameter]
    public List<string> Categories { get; set; } = new();
    [Parameter] 
    public EventCallback<Reviewer> OnSave { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }
    public string errorMessage = string.Empty;
    public User user = new();
    public int searchResults = 0;
    public bool showInviteUserModal = false;
    public bool showFindUserModal = false;
    public List<User> searchResult = new();
    private List<string> selectedCategories = new();
    private UserFilter searchFilter = new UserFilter{
        Query = string.Empty,
        numberOfUsersShown = 12,
        numberOfUsersSkipped = 0
    };

    private async void HandleSearch()
    {
        searchResults = await userService.GetUsersBySearchOrFilterHits(searchFilter);
        searchResult = await userService.GetUsersBySearchOrFilter(searchFilter);
        showFindUserModal = true;
    }

    private void HandleCategoryToggle(string category, object? checkedValue)
    {
        if (checkedValue is bool isChecked)
        {
            if (isChecked && !selectedCategories.Contains(category))
            {
                selectedCategories.Add(category);
            }
            else if (!isChecked)
            {
                selectedCategories.Remove(category);
            }
        }
    }

    public void HandleInviteUser(User invitedUser)
    {
        invitedUser = user;
    }

    public async Task HandleValidSubmit()
    {
        if (user.Id == -1)
        {
            errorMessage = "Der skal vælges en bruger, eller sendes en invitation ud til dit nye komite medlem";
            return;
        }

        NewReviewer.Categories = selectedCategories;
        await OnSave.InvokeAsync(NewReviewer);
    }

    public async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }

}
