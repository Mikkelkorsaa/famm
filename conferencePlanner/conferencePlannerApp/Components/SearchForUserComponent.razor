@inject IUserService userService

<div class="position-relative">
    <!-- Close button -->
    <button type="button" class="btn-close position-absolute top-0 end-0" aria-label="Close" @onclick="HandleCancel"></button>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <!-- Input field for searching users -->
                <input type="text"
                       class="form-control"
                       @bind="searchTerm.Query"
                       @bind:event="oninput"
                       placeholder="Søg efter bruger..." />
                <!-- Search button -->
                <button class="btn btn-outline-secondary"
                        type="button"
                        @onclick="HandleSearch">
                    Søg
                </button>
            </div>
        </div>
    </div>

    @if (totalResults > 0)
    {
        <div class="row mb-2">
            <div class="col d-flex justify-content-between align-items-center">
                <small class="text-muted fst-italic">
                    Viser @(searchTerm.numberOfUsersSkipped + 1)-@Math.Min(searchTerm.numberOfUsersSkipped + searchTerm.numberOfUsersShown, totalResults) af @totalResults resultater
                </small>
                <div>
                    @if (searchTerm.numberOfUsersSkipped > 0)
                    {
                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="HandlePrevious">Forrige</button>
                    }
                    @if (searchTerm.numberOfUsersSkipped + searchTerm.numberOfUsersShown < totalResults)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="HandleNext">Næste</button>
                    }
                </div>
            </div>
        </div>
    }

    @if (FoundUsers.Any())
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Navn</th>
                        <th>Email</th>
                        <th>Organisation</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in FoundUsers)
                    {
                        <tr style="cursor: pointer" @onclick="() => HandleUserSelection(user)">
                            <td>@user.Name</td>
                            <td>@user.Email</td>
                            <td>@user.Organization</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<User> FoundUsers { get; set; } = new(); //list of found users
    [Parameter]
    public EventCallback OnCancel { get; set; } //event callback for cancel button
    [Parameter]
    public EventCallback<User> OnUserSelected { get; set; } //event callback for user selection
    [Parameter]
    public UserFilter searchTerm { get; set; } = new UserFilter //event callback for user selection
        {
            Query = String.Empty,
            numberOfUsersShown = 12,
            numberOfUsersSkipped = 0
        };
    [Parameter]
    public int totalResults { get; set; } = 0; //total number of results

    //method for handling search for users based on search term 
    protected override async Task OnParametersSetAsync()
    {
        await HandleSearch();
    }

    //method for handling search for users based on search term
    private async Task HandleSearch()
    {
        //get total number of results 
        totalResults = await userService.GetUsersBySearchOrFilterHits(searchTerm);
        //get found users based on search term
        FoundUsers = await userService.GetUsersBySearchOrFilter(searchTerm);
        StateHasChanged();
    }

    //method for handling user selection by invoking onUserSelected event
    private async Task HandleUserSelection(User user)
    {
        await OnUserSelected.InvokeAsync(user);
    }

    //method for handling next users to be shown
    private async Task HandleNext()
    {
        searchTerm.numberOfUsersSkipped += searchTerm.numberOfUsersShown;
        await HandleSearch();
    }

    //method for handling previous users to be shown
    private async Task HandlePrevious()
    {
        searchTerm.numberOfUsersSkipped = Math.Max(0, searchTerm.numberOfUsersSkipped - searchTerm.numberOfUsersShown);
        await HandleSearch();
    }

    //method for handling cancel button by invoking onCancel event
    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }
}