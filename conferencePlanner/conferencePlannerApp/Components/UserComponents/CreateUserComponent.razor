@inject IAuthService authService
@inject NavigationManager navManager

<EditForm Model="@EditUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Navn</label>
        <InputText @bind-Value="EditUser.Name" class="form-control" />
        <ValidationMessage For="@(() => EditUser.Name)" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="EditUser.Email" class="form-control" />
        <ValidationMessage For="@(() => EditUser.Email)" />
    </div>

    <div class="form-group mt-3">
        <label>Adgangskode</label>
        <InputText type="password" @bind-Value="EditUser.Password" class="form-control" />
        <ValidationMessage For="@(() => EditUser.Password)" />
    </div>

    <div class="form-group mt-3">
        <label>Bekræft adgangskode</label>
        <InputText type="password" @bind-Value="ConfirmPassword" class="form-control" />
        <ValidationMessage For="@(() => ConfirmPassword)" />
    </div>

    <div class="form-group mt-3">
        <label>Organisation</label>
        <InputText @bind-Value="EditUser.Organization" class="form-control" />
        <ValidationMessage For="@(() => EditUser.Organization)" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    <button type="submit" class="btn btn-primary mt-3 w-100">Opret</button>
</EditForm>

@code {
    [Parameter]
    public User EditUser { get; set; } = new();
    public string? errorMessage { get; set; } = null;
    public string? ConfirmPassword { get; set; }
    public User? user { get; set; } = null;


    private async Task HandleRegister()
    {
        try
        {
            (user, errorMessage) = await authService.CreateUser(EditUser);
            if (user != null)
            {
                navManager.NavigateTo("/");
            }
        }
        catch
        {
            errorMessage = "Server not found";
        }
    }

}
