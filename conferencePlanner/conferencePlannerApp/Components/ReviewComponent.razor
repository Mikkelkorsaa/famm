@inject IAbstractService AbstractService
@inject IConferenceService ConferenceService
@inject IUserService UserService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<EditForm Model="Review" OnValidSubmit="UpdateReview">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="abstract-review-wrapper">
        <div class="abstract-review">
            <div class="review-card">
                <div class="review-criteria">
                    @foreach (var criteria in Review.Criterias)
                    {
                        <div class="form-group">
                            <label class="criteria-label">@criteria.Name</label>
                            <div class="grade-selector">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    int gradeValue = i;
                                    <button type="button"
                                    class="grade-button @(criteria.Grade == gradeValue ? "selected" : "")"
                                    @onclick="() => SetCriteriaGrade(criteria.Name, gradeValue)">
                                        @gradeValue
                                    </button>
                                }
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        <label class="comment-label">Comment</label>
                        <textarea class="comment-textarea"
                        rows="4"
                        @bind="_comment"
                        placeholder="Enter your detailed observations...">@_comment</textarea>
                    </div>

                    <div class="form-group">
                        <input type="checkbox" id="recommendCheckbox" @bind="recommend" />
                        <label for="recommendCheckbox" class="recommend-label">Recommend Abstract</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="button-container">
            <button type="submit"
            class="save-button"
            disabled="@(isSaving)">
                @if (isSaving)
                {
                    <span class="spinner"></span>
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Review</span>
                }
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Abstract? SelectedAbstract { get; set; }
    private int? UserId;
    private bool isSaving = false;
    private List<string> reviewCriteria = new();
    private int newReviewId;
    private bool recommend = false;
    private string _comment = "";
    private Review Review = new();
    private bool _hasReviewed = false;

    protected override async Task OnInitializedAsync()
    {
        int? conferenceId = await LocalStorage.GetItemAsync<int?>("currentConferenceId");

        try
        {
            UserId = await UserService.GetCurrentUserIdAsync();
        }
        catch (InvalidOperationException)
        {
            // Handle the error appropriately, e.g., redirect to login or show an error message
            return;
        }

        if (SelectedAbstract != null && UserId.HasValue) //if the person hasnt reviewed
        {
            _hasReviewed = await ConferenceService.HasReviewAsync(SelectedAbstract.Id, UserId.Value);
            if (!_hasReviewed)
            {
                newReviewId = await ConferenceService.GetNextReviewIdAsync(SelectedAbstract.Id);
                reviewCriteria = await ConferenceService.GetCriteriaByIdAsync(conferenceId.Value);

                Review = new Review
                    {
                        Id = newReviewId,
                        UserId = UserId ?? 0,
                        Criterias = reviewCriteria.Select(c => new Criteria { Name = c }).ToList()
                    };
                Console.WriteLine("Der findes ikke et review");
                Console.WriteLine(Review);

            }
            else 
            {
                var existingReview = await ConferenceService.GetExistingReviewAsync(SelectedAbstract.Id, UserId.Value);
                if (existingReview != null)
                {
                    Review = existingReview;
                    Console.WriteLine("Der findes et review");
                    Console.WriteLine(Review);
                    _comment = Review.Comment ?? string.Empty;
                }
            }
        }
        

       
    }

    private async Task UpdateReview()
    {
        if (SelectedAbstract == null)
        {
            return;
        }

        isSaving = true;
        try
        {
            
            
            Review.Recommend = recommend; // Ensure Recommend is set
            Review.Comment = _comment;
           
            Console.WriteLine(Review);
            await ConferenceService.UpdateReview(SelectedAbstract.Id, Review);
            Console.WriteLine(Review);
            // Optionally, display a success toast or notification
        }
        catch (Exception)
        {
            // Optionally, display an error notification
        }
        finally
        {
            isSaving = false;
        }
    }

    private void SetCriteriaGrade(string criteriaName, int gradeValue)
    {
        var criteria = Review.Criterias.FirstOrDefault(c => c.Name == criteriaName);
        if (criteria != null)
        {
            criteria.Grade = gradeValue;
        }
        else
        {
            Review.Criterias.Add(new Criteria { Name = criteriaName, Grade = gradeValue });
        }
    }
}

