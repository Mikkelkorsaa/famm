@using Microsoft.AspNetCore.Components.Forms
@inject IUserService userService

<!-- Editform for inviting a user to the comitee -->
<EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
    <div class="row mb-3">
        <div class="col-12">
            <div class="form-group">
                <label for="name">Navn</label>
                <InputText id="name"
                           class="form-control"
                           @bind-Value="formModel.Name" />
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email"
                           class="form-control"
                           @bind-Value="formModel.Email" />
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="form-group">
                <label for="organization">Organisation</label>
                <InputText id="organization"
                           class="form-control"
                           @bind-Value="formModel.Organization" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-6">
            <button type="submit" class="btn btn-success w-100">Gem</button>
        </div>
        <div class="col-6">
            <button type="button" class="btn btn-secondary w-100" @onclick="HandleCancel">Annuller</button>
        </div>
    </div>
</EditForm>

@code {
    // EventCallback for saving the user
    [Parameter]
    public EventCallback<User> OnSave { get; set; }
    // EventCallback for canceling the invite
    [Parameter]
    public EventCallback OnCancel { get; set; }
    // Model for the form
    private InviteUserModel formModel = new();

    private class InviteUserModel
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Organization { get; set; } = "";
    }

    // Method for handling the submit of the form and creating the user
    // The user is created using the userservice and then the evntcallback OnSave is invoked
    //to send the user to the parent component
    private async Task HandleValidSubmit()
    {
        User user = new User
            {
                Email = formModel.Email,
                Name = formModel.Name,
                Organization = formModel.Organization,
                Role = UserRole.Reviewer,
                Password = "1234"
            };
        user = await userService.CreateUserAsync(user);
        await OnSave.InvokeAsync(user);
    }

// Method for handling the cancel button
    private async void HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }
}