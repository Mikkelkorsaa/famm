@inject IUploadFileService UploadFileService
@inject IJSRuntime JSRuntime


<div class="upload-container">
	<InputFile OnChange="@HandleSelectedFile" accept="@AcceptedFileTypes"></InputFile>
	@if (!string.IsNullOrEmpty(_imageUrl))
	{
		<div class="image-preview">
			<img src="@_imageUrl" alt="Image preview" style="max-width: 300px; max-height: 300px;" />
		</div>
	}
</div>

@code {
	[Parameter]
	public EventCallback<byte[]> OnFileUploaded { get; set; }
	[Parameter]
	public string AcceptedFileTypes { get; set; }
	[Parameter]
	public int AcceptedSize { get; set; }


	private string? _imageUrl { get; set; }

	private async Task HandleSelectedFile(InputFileChangeEventArgs e)
	{
		var file = e.File;

		// Validate file type
		var allowedTypes = AcceptedFileTypes.Split(',').Select(t => t.Trim().ToLower()).ToArray();
		if (!allowedTypes.Contains(file.ContentType.ToLower()))
		{
			// Handle invalid file type (e.g., show an error message)
			return;
		}

		// Create a preview URL
		var buffer = new byte[file.Size];
		await file.OpenReadStream(maxAllowedSize: AcceptedSize).ReadAsync(buffer);
		_imageUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";

		byte[] bytearr = await UploadFileService.ConvertToByteArray(file);
		string  base64string = Convert.ToBase64String(bytearr);

		await OnFileUploaded.InvokeAsync(base64string);
	}
}
